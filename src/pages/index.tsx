import { type NextPage } from 'next';
import Head from 'next/head';
import { signIn, signOut, useSession } from 'next-auth/react';
import { useForm } from 'react-hook-form';
import { trpc } from '../utils/trpc';

type FormValues = {
  first_name: string;
  last_name: string;
  email: string;
  password: string;
};

const Home: NextPage = () => {
  const { register, handleSubmit } = useForm<FormValues>();
  const users = trpc.user.getAll.useQuery();
  const mutationCreateUser = trpc.user.createUser.useMutation({
    onSuccess: () => users.refetch(),
  });
  const onSubmit = async (data: FormValues) => {
    console.dir(data);
    mutationCreateUser.mutate(data);
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]'>
        <div className='container flex items-center justify-center gap-12 px-4 py-16 '>
          <form onSubmit={handleSubmit(onSubmit)}>
            <div className='flex flex-col text-white [&_input]:text-gray-900'>
              <label htmlFor='first'>First name</label>
              <input id='first' {...register('first_name')} type='text' />
            </div>
            <div className='flex flex-col text-white [&_input]:text-gray-900'>
              <label htmlFor='last'>Last name</label>
              <input id='last' {...register('last_name')} type='text' />
            </div>
            <div className='flex flex-col text-white [&_input]:text-gray-900'>
              <label htmlFor='email'>Email</label>
              <input id='email' {...register('email')} type='text' />
            </div>
            <div className='flex flex-col text-white [&_input]:text-gray-900'>
              <label htmlFor='password'>Password</label>
              <input id='password' {...register('password')} type='password' />
            </div>
            <button className='text-white'>Create user</button>
          </form>

          <div className='flex flex-col'>
            <h1 className='text-white'>Users:</h1>
            {users.data?.map((user) => (
              <div
                className='flex flex-col border border-white p-5 text-white'
                key={user.id}
              >
                {user.first_name}
                {user.email}
                {user.password}
              </div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className='flex flex-col items-center justify-center gap-4'>
      <p className='text-center text-2xl text-white'>
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className='rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20'
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? 'Sign out' : 'Sign in'}
      </button>
    </div>
  );
};
