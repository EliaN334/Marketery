// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  first_name    String
  last_name     String
  full_name     String
  role          UserRole   @default(USER)
  image         Image
  emailVerified Boolean?   @default(false) @map("email_verified")
  provider      Provider?  @default(DEFAULT)
  email         String     @unique
  password      String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  account_id    String
  products      Product[]
  cart_items    CartItem[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

enum Provider {
  GITHUB
  DEFAULT
}

enum UserRole {
  USER
  ADMIN
}

model Product {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  qty           Int
  image_preview Image
  images        Image[]
  discount      Float?     @default(0)
  user_id       String     @db.ObjectId
  user          User       @relation(fields: [user_id], references: [id])
  categories    Category[]
  cart_item     CartItem[]

  @@map("product")
}

type Image {
  url       String
  public_id String?
}

model CartItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  product    Product @relation(fields: [product_id], references: [id])
  product_id String  @db.ObjectId
  user       User?   @relation(fields: [user_id], references: [id])
  user_id    String  @db.ObjectId

  @@map("cartItem")
}

model Category {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  image      Image
  product    Product @relation(fields: [product_id], references: [id])
  product_id String  @db.ObjectId

  @@map("category")
}
